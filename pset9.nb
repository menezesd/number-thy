(* Content-type: application/mathematica *)

(*** Wolfram Notebook File ***)
(* http://www.wolfram.com/nb *)

(* CreatedBy='Mathematica 7.0' *)

(*CacheID: 234*)
(* Internal cache information:
NotebookFileLineBreakTest
NotebookFileLineBreakTest
NotebookDataPosition[       145,          7]
NotebookDataLength[     42302,        896]
NotebookOptionsPosition[     39889,        809]
NotebookOutlinePosition[     40252,        825]
CellTagsIndexPosition[     40209,        822]
WindowFrame->Normal*)

(* Beginning of Notebook Content *)
Notebook[{
Cell[BoxData[
 RowBox[{
  RowBox[{"plist", " ", "=", 
   RowBox[{"Table", "[", 
    RowBox[{
     RowBox[{"Prime", "[", "i", "]"}], ",", 
     RowBox[{"{", 
      RowBox[{"i", ",", "2", ",", "1001"}], "}"}]}], "]"}]}], ";"}]], "Input",\

 CellChangeTimes->{{3.486997281771988*^9, 3.486997328532188*^9}}],

Cell[BoxData[
 RowBox[{
  RowBox[{"minusOneIsSquare", "[", 
   RowBox[{"p_Integer", "?", "PrimeQ"}], "]"}], " ", ":=", " ", 
  RowBox[{"MemberQ", "[", 
   RowBox[{
    RowBox[{"Table", "[", 
     RowBox[{
      RowBox[{"Mod", "[", 
       RowBox[{
        RowBox[{"i", "^", "2"}], ",", "p"}], "]"}], ",", " ", 
      RowBox[{"{", 
       RowBox[{"i", ",", "1", ",", 
        RowBox[{"p", "-", "1"}]}], "}"}]}], "]"}], ",", " ", 
    RowBox[{"p", "-", "1"}]}], "]"}]}]], "Input",
 CellChangeTimes->{{3.486997330746985*^9, 3.486997385749996*^9}, {
  3.486997470312821*^9, 3.486997496663165*^9}, {3.486997630301406*^9, 
  3.486997631453403*^9}}],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"minusOneIsSquare", "::", "\"\<usage\>\""}], " ", "=", " ", 
  "\"\<minusOneIsSquare[p] returns True if -1 is a square modulo a prime \
number p.\>\""}]], "Input",
 CellChangeTimes->{{3.486997867797718*^9, 3.486997895113125*^9}}],

Cell[BoxData["\<\"minusOneIsSquare[p] returns True if -1 is a square modulo a \
prime number p.\"\>"], "Output",
 CellChangeTimes->{3.486997898803678*^9}]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"minusOneIsSquare", "[", "2", "]"}]], "Input",
 CellChangeTimes->{{3.4869974976692047`*^9, 3.486997506100725*^9}}],

Cell[BoxData["True"], "Output",
 CellChangeTimes->{3.486997506794799*^9}]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"plist1", "=", " ", 
  RowBox[{"Select", "[", 
   RowBox[{"plist", ",", "minusOneIsSquare"}], "]"}]}]], "Input",
 CellChangeTimes->{{3.4869975146416483`*^9, 3.486997527186873*^9}}],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
  "5", ",", "13", ",", "17", ",", "29", ",", "37", ",", "41", ",", "53", ",", 
   "61", ",", "73", ",", "89", ",", "97", ",", "101", ",", "109", ",", "113", 
   ",", "137", ",", "149", ",", "157", ",", "173", ",", "181", ",", "193", 
   ",", "197", ",", "229", ",", "233", ",", "241", ",", "257", ",", "269", 
   ",", "277", ",", "281", ",", "293", ",", "313", ",", "317", ",", "337", 
   ",", "349", ",", "353", ",", "373", ",", "389", ",", "397", ",", "401", 
   ",", "409", ",", "421", ",", "433", ",", "449", ",", "457", ",", "461", 
   ",", "509", ",", "521", ",", "541", ",", "557", ",", "569", ",", "577", 
   ",", "593", ",", "601", ",", "613", ",", "617", ",", "641", ",", "653", 
   ",", "661", ",", "673", ",", "677", ",", "701", ",", "709", ",", "733", 
   ",", "757", ",", "761", ",", "769", ",", "773", ",", "797", ",", "809", 
   ",", "821", ",", "829", ",", "853", ",", "857", ",", "877", ",", "881", 
   ",", "929", ",", "937", ",", "941", ",", "953", ",", "977", ",", "997", 
   ",", "1009", ",", "1013", ",", "1021", ",", "1033", ",", "1049", ",", 
   "1061", ",", "1069", ",", "1093", ",", "1097", ",", "1109", ",", "1117", 
   ",", "1129", ",", "1153", ",", "1181", ",", "1193", ",", "1201", ",", 
   "1213", ",", "1217", ",", "1229", ",", "1237", ",", "1249", ",", "1277", 
   ",", "1289", ",", "1297", ",", "1301", ",", "1321", ",", "1361", ",", 
   "1373", ",", "1381", ",", "1409", ",", "1429", ",", "1433", ",", "1453", 
   ",", "1481", ",", "1489", ",", "1493", ",", "1549", ",", "1553", ",", 
   "1597", ",", "1601", ",", "1609", ",", "1613", ",", "1621", ",", "1637", 
   ",", "1657", ",", "1669", ",", "1693", ",", "1697", ",", "1709", ",", 
   "1721", ",", "1733", ",", "1741", ",", "1753", ",", "1777", ",", "1789", 
   ",", "1801", ",", "1861", ",", "1873", ",", "1877", ",", "1889", ",", 
   "1901", ",", "1913", ",", "1933", ",", "1949", ",", "1973", ",", "1993", 
   ",", "1997", ",", "2017", ",", "2029", ",", "2053", ",", "2069", ",", 
   "2081", ",", "2089", ",", "2113", ",", "2129", ",", "2137", ",", "2141", 
   ",", "2153", ",", "2161", ",", "2213", ",", "2221", ",", "2237", ",", 
   "2269", ",", "2273", ",", "2281", ",", "2293", ",", "2297", ",", "2309", 
   ",", "2333", ",", "2341", ",", "2357", ",", "2377", ",", "2381", ",", 
   "2389", ",", "2393", ",", "2417", ",", "2437", ",", "2441", ",", "2473", 
   ",", "2477", ",", "2521", ",", "2549", ",", "2557", ",", "2593", ",", 
   "2609", ",", "2617", ",", "2621", ",", "2633", ",", "2657", ",", "2677", 
   ",", "2689", ",", "2693", ",", "2713", ",", "2729", ",", "2741", ",", 
   "2749", ",", "2753", ",", "2777", ",", "2789", ",", "2797", ",", "2801", 
   ",", "2833", ",", "2837", ",", "2857", ",", "2861", ",", "2897", ",", 
   "2909", ",", "2917", ",", "2953", ",", "2957", ",", "2969", ",", "3001", 
   ",", "3037", ",", "3041", ",", "3049", ",", "3061", ",", "3089", ",", 
   "3109", ",", "3121", ",", "3137", ",", "3169", ",", "3181", ",", "3209", 
   ",", "3217", ",", "3221", ",", "3229", ",", "3253", ",", "3257", ",", 
   "3301", ",", "3313", ",", "3329", ",", "3361", ",", "3373", ",", "3389", 
   ",", "3413", ",", "3433", ",", "3449", ",", "3457", ",", "3461", ",", 
   "3469", ",", "3517", ",", "3529", ",", "3533", ",", "3541", ",", "3557", 
   ",", "3581", ",", "3593", ",", "3613", ",", "3617", ",", "3637", ",", 
   "3673", ",", "3677", ",", "3697", ",", "3701", ",", "3709", ",", "3733", 
   ",", "3761", ",", "3769", ",", "3793", ",", "3797", ",", "3821", ",", 
   "3833", ",", "3853", ",", "3877", ",", "3881", ",", "3889", ",", "3917", 
   ",", "3929", ",", "3989", ",", "4001", ",", "4013", ",", "4021", ",", 
   "4049", ",", "4057", ",", "4073", ",", "4093", ",", "4129", ",", "4133", 
   ",", "4153", ",", "4157", ",", "4177", ",", "4201", ",", "4217", ",", 
   "4229", ",", "4241", ",", "4253", ",", "4261", ",", "4273", ",", "4289", 
   ",", "4297", ",", "4337", ",", "4349", ",", "4357", ",", "4373", ",", 
   "4397", ",", "4409", ",", "4421", ",", "4441", ",", "4457", ",", "4481", 
   ",", "4493", ",", "4513", ",", "4517", ",", "4549", ",", "4561", ",", 
   "4597", ",", "4621", ",", "4637", ",", "4649", ",", "4657", ",", "4673", 
   ",", "4721", ",", "4729", ",", "4733", ",", "4789", ",", "4793", ",", 
   "4801", ",", "4813", ",", "4817", ",", "4861", ",", "4877", ",", "4889", 
   ",", "4909", ",", "4933", ",", "4937", ",", "4957", ",", "4969", ",", 
   "4973", ",", "4993", ",", "5009", ",", "5021", ",", "5077", ",", "5081", 
   ",", "5101", ",", "5113", ",", "5153", ",", "5189", ",", "5197", ",", 
   "5209", ",", "5233", ",", "5237", ",", "5261", ",", "5273", ",", "5281", 
   ",", "5297", ",", "5309", ",", "5333", ",", "5381", ",", "5393", ",", 
   "5413", ",", "5417", ",", "5437", ",", "5441", ",", "5449", ",", "5477", 
   ",", "5501", ",", "5521", ",", "5557", ",", "5569", ",", "5573", ",", 
   "5581", ",", "5641", ",", "5653", ",", "5657", ",", "5669", ",", "5689", 
   ",", "5693", ",", "5701", ",", "5717", ",", "5737", ",", "5741", ",", 
   "5749", ",", "5801", ",", "5813", ",", "5821", ",", "5849", ",", "5857", 
   ",", "5861", ",", "5869", ",", "5881", ",", "5897", ",", "5953", ",", 
   "5981", ",", "6029", ",", "6037", ",", "6053", ",", "6073", ",", "6089", 
   ",", "6101", ",", "6113", ",", "6121", ",", "6133", ",", "6173", ",", 
   "6197", ",", "6217", ",", "6221", ",", "6229", ",", "6257", ",", "6269", 
   ",", "6277", ",", "6301", ",", "6317", ",", "6329", ",", "6337", ",", 
   "6353", ",", "6361", ",", "6373", ",", "6389", ",", "6397", ",", "6421", 
   ",", "6449", ",", "6469", ",", "6473", ",", "6481", ",", "6521", ",", 
   "6529", ",", "6553", ",", "6569", ",", "6577", ",", "6581", ",", "6637", 
   ",", "6653", ",", "6661", ",", "6673", ",", "6689", ",", "6701", ",", 
   "6709", ",", "6733", ",", "6737", ",", "6761", ",", "6781", ",", "6793", 
   ",", "6829", ",", "6833", ",", "6841", ",", "6857", ",", "6869", ",", 
   "6917", ",", "6949", ",", "6961", ",", "6977", ",", "6997", ",", "7001", 
   ",", "7013", ",", "7057", ",", "7069", ",", "7109", ",", "7121", ",", 
   "7129", ",", "7177", ",", "7193", ",", "7213", ",", "7229", ",", "7237", 
   ",", "7253", ",", "7297", ",", "7309", ",", "7321", ",", "7333", ",", 
   "7349", ",", "7369", ",", "7393", ",", "7417", ",", "7433", ",", "7457", 
   ",", "7477", ",", "7481", ",", "7489", ",", "7517", ",", "7529", ",", 
   "7537", ",", "7541", ",", "7549", ",", "7561", ",", "7573", ",", "7577", 
   ",", "7589", ",", "7621", ",", "7649", ",", "7669", ",", "7673", ",", 
   "7681", ",", "7717", ",", "7741", ",", "7753", ",", "7757", ",", "7789", 
   ",", "7793", ",", "7817", ",", "7829", ",", "7841", ",", "7853", ",", 
   "7873", ",", "7877", ",", "7901"}], "}"}]], "Output",
 CellChangeTimes->{3.486997528486718*^9}]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"plist2", "=", 
  RowBox[{"Complement", "[", 
   RowBox[{"plist", ",", "plist1"}], "]"}]}]], "Input",
 CellChangeTimes->{{3.486997556754252*^9, 3.486997590590632*^9}}],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
  "3", ",", "7", ",", "11", ",", "19", ",", "23", ",", "31", ",", "43", ",", 
   "47", ",", "59", ",", "67", ",", "71", ",", "79", ",", "83", ",", "103", 
   ",", "107", ",", "127", ",", "131", ",", "139", ",", "151", ",", "163", 
   ",", "167", ",", "179", ",", "191", ",", "199", ",", "211", ",", "223", 
   ",", "227", ",", "239", ",", "251", ",", "263", ",", "271", ",", "283", 
   ",", "307", ",", "311", ",", "331", ",", "347", ",", "359", ",", "367", 
   ",", "379", ",", "383", ",", "419", ",", "431", ",", "439", ",", "443", 
   ",", "463", ",", "467", ",", "479", ",", "487", ",", "491", ",", "499", 
   ",", "503", ",", "523", ",", "547", ",", "563", ",", "571", ",", "587", 
   ",", "599", ",", "607", ",", "619", ",", "631", ",", "643", ",", "647", 
   ",", "659", ",", "683", ",", "691", ",", "719", ",", "727", ",", "739", 
   ",", "743", ",", "751", ",", "787", ",", "811", ",", "823", ",", "827", 
   ",", "839", ",", "859", ",", "863", ",", "883", ",", "887", ",", "907", 
   ",", "911", ",", "919", ",", "947", ",", "967", ",", "971", ",", "983", 
   ",", "991", ",", "1019", ",", "1031", ",", "1039", ",", "1051", ",", 
   "1063", ",", "1087", ",", "1091", ",", "1103", ",", "1123", ",", "1151", 
   ",", "1163", ",", "1171", ",", "1187", ",", "1223", ",", "1231", ",", 
   "1259", ",", "1279", ",", "1283", ",", "1291", ",", "1303", ",", "1307", 
   ",", "1319", ",", "1327", ",", "1367", ",", "1399", ",", "1423", ",", 
   "1427", ",", "1439", ",", "1447", ",", "1451", ",", "1459", ",", "1471", 
   ",", "1483", ",", "1487", ",", "1499", ",", "1511", ",", "1523", ",", 
   "1531", ",", "1543", ",", "1559", ",", "1567", ",", "1571", ",", "1579", 
   ",", "1583", ",", "1607", ",", "1619", ",", "1627", ",", "1663", ",", 
   "1667", ",", "1699", ",", "1723", ",", "1747", ",", "1759", ",", "1783", 
   ",", "1787", ",", "1811", ",", "1823", ",", "1831", ",", "1847", ",", 
   "1867", ",", "1871", ",", "1879", ",", "1907", ",", "1931", ",", "1951", 
   ",", "1979", ",", "1987", ",", "1999", ",", "2003", ",", "2011", ",", 
   "2027", ",", "2039", ",", "2063", ",", "2083", ",", "2087", ",", "2099", 
   ",", "2111", ",", "2131", ",", "2143", ",", "2179", ",", "2203", ",", 
   "2207", ",", "2239", ",", "2243", ",", "2251", ",", "2267", ",", "2287", 
   ",", "2311", ",", "2339", ",", "2347", ",", "2351", ",", "2371", ",", 
   "2383", ",", "2399", ",", "2411", ",", "2423", ",", "2447", ",", "2459", 
   ",", "2467", ",", "2503", ",", "2531", ",", "2539", ",", "2543", ",", 
   "2551", ",", "2579", ",", "2591", ",", "2647", ",", "2659", ",", "2663", 
   ",", "2671", ",", "2683", ",", "2687", ",", "2699", ",", "2707", ",", 
   "2711", ",", "2719", ",", "2731", ",", "2767", ",", "2791", ",", "2803", 
   ",", "2819", ",", "2843", ",", "2851", ",", "2879", ",", "2887", ",", 
   "2903", ",", "2927", ",", "2939", ",", "2963", ",", "2971", ",", "2999", 
   ",", "3011", ",", "3019", ",", "3023", ",", "3067", ",", "3079", ",", 
   "3083", ",", "3119", ",", "3163", ",", "3167", ",", "3187", ",", "3191", 
   ",", "3203", ",", "3251", ",", "3259", ",", "3271", ",", "3299", ",", 
   "3307", ",", "3319", ",", "3323", ",", "3331", ",", "3343", ",", "3347", 
   ",", "3359", ",", "3371", ",", "3391", ",", "3407", ",", "3463", ",", 
   "3467", ",", "3491", ",", "3499", ",", "3511", ",", "3527", ",", "3539", 
   ",", "3547", ",", "3559", ",", "3571", ",", "3583", ",", "3607", ",", 
   "3623", ",", "3631", ",", "3643", ",", "3659", ",", "3671", ",", "3691", 
   ",", "3719", ",", "3727", ",", "3739", ",", "3767", ",", "3779", ",", 
   "3803", ",", "3823", ",", "3847", ",", "3851", ",", "3863", ",", "3907", 
   ",", "3911", ",", "3919", ",", "3923", ",", "3931", ",", "3943", ",", 
   "3947", ",", "3967", ",", "4003", ",", "4007", ",", "4019", ",", "4027", 
   ",", "4051", ",", "4079", ",", "4091", ",", "4099", ",", "4111", ",", 
   "4127", ",", "4139", ",", "4159", ",", "4211", ",", "4219", ",", "4231", 
   ",", "4243", ",", "4259", ",", "4271", ",", "4283", ",", "4327", ",", 
   "4339", ",", "4363", ",", "4391", ",", "4423", ",", "4447", ",", "4451", 
   ",", "4463", ",", "4483", ",", "4507", ",", "4519", ",", "4523", ",", 
   "4547", ",", "4567", ",", "4583", ",", "4591", ",", "4603", ",", "4639", 
   ",", "4643", ",", "4651", ",", "4663", ",", "4679", ",", "4691", ",", 
   "4703", ",", "4723", ",", "4751", ",", "4759", ",", "4783", ",", "4787", 
   ",", "4799", ",", "4831", ",", "4871", ",", "4903", ",", "4919", ",", 
   "4931", ",", "4943", ",", "4951", ",", "4967", ",", "4987", ",", "4999", 
   ",", "5003", ",", "5011", ",", "5023", ",", "5039", ",", "5051", ",", 
   "5059", ",", "5087", ",", "5099", ",", "5107", ",", "5119", ",", "5147", 
   ",", "5167", ",", "5171", ",", "5179", ",", "5227", ",", "5231", ",", 
   "5279", ",", "5303", ",", "5323", ",", "5347", ",", "5351", ",", "5387", 
   ",", "5399", ",", "5407", ",", "5419", ",", "5431", ",", "5443", ",", 
   "5471", ",", "5479", ",", "5483", ",", "5503", ",", "5507", ",", "5519", 
   ",", "5527", ",", "5531", ",", "5563", ",", "5591", ",", "5623", ",", 
   "5639", ",", "5647", ",", "5651", ",", "5659", ",", "5683", ",", "5711", 
   ",", "5743", ",", "5779", ",", "5783", ",", "5791", ",", "5807", ",", 
   "5827", ",", "5839", ",", "5843", ",", "5851", ",", "5867", ",", "5879", 
   ",", "5903", ",", "5923", ",", "5927", ",", "5939", ",", "5987", ",", 
   "6007", ",", "6011", ",", "6043", ",", "6047", ",", "6067", ",", "6079", 
   ",", "6091", ",", "6131", ",", "6143", ",", "6151", ",", "6163", ",", 
   "6199", ",", "6203", ",", "6211", ",", "6247", ",", "6263", ",", "6271", 
   ",", "6287", ",", "6299", ",", "6311", ",", "6323", ",", "6343", ",", 
   "6359", ",", "6367", ",", "6379", ",", "6427", ",", "6451", ",", "6491", 
   ",", "6547", ",", "6551", ",", "6563", ",", "6571", ",", "6599", ",", 
   "6607", ",", "6619", ",", "6659", ",", "6679", ",", "6691", ",", "6703", 
   ",", "6719", ",", "6763", ",", "6779", ",", "6791", ",", "6803", ",", 
   "6823", ",", "6827", ",", "6863", ",", "6871", ",", "6883", ",", "6899", 
   ",", "6907", ",", "6911", ",", "6947", ",", "6959", ",", "6967", ",", 
   "6971", ",", "6983", ",", "6991", ",", "7019", ",", "7027", ",", "7039", 
   ",", "7043", ",", "7079", ",", "7103", ",", "7127", ",", "7151", ",", 
   "7159", ",", "7187", ",", "7207", ",", "7211", ",", "7219", ",", "7243", 
   ",", "7247", ",", "7283", ",", "7307", ",", "7331", ",", "7351", ",", 
   "7411", ",", "7451", ",", "7459", ",", "7487", ",", "7499", ",", "7507", 
   ",", "7523", ",", "7547", ",", "7559", ",", "7583", ",", "7591", ",", 
   "7603", ",", "7607", ",", "7639", ",", "7643", ",", "7687", ",", "7691", 
   ",", "7699", ",", "7703", ",", "7723", ",", "7727", ",", "7759", ",", 
   "7823", ",", "7867", ",", "7879", ",", "7883", ",", "7907", ",", "7919", 
   ",", "7927"}], "}"}]], "Output",
 CellChangeTimes->{3.486997590988295*^9}]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"And", " ", "@@", " ", 
  RowBox[{"Map", "[", 
   RowBox[{
    RowBox[{
     RowBox[{"IntegerQ", "[", 
      RowBox[{
       RowBox[{"(", 
        RowBox[{"#", "-", "1"}], ")"}], "/", "4"}], "]"}], "&"}], ",", " ", 
    "plist1"}], "]"}]}]], "Input",
 CellChangeTimes->{{3.4869975924171143`*^9, 3.4869976761928253`*^9}}],

Cell[BoxData["True"], "Output",
 CellChangeTimes->{{3.486997657535797*^9, 3.4869976772564487`*^9}}]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"And", "@@", 
  RowBox[{"Map", "[", 
   RowBox[{
    RowBox[{
     RowBox[{"IntegerQ", "[", 
      RowBox[{
       RowBox[{"(", 
        RowBox[{"#", "+", "1"}], ")"}], "/", "4"}], "]"}], "&"}], ",", 
    "plist2"}], "]"}]}]], "Input",
 CellChangeTimes->{{3.486997683420074*^9, 3.486997704294516*^9}}],

Cell[BoxData["True"], "Output",
 CellChangeTimes->{3.486997704735811*^9}]
}, Open  ]],

Cell["\<\
All of the elements of plist 1 are of the form 4k+1, and all of the elements \
of plist2 are of the form 4k-1.  \
\>", "Text",
 CellChangeTimes->{{3.486997719901663*^9, 3.486997738186232*^9}}],

Cell[BoxData[
 RowBox[{
  RowBox[{"twoIsSquare", "[", 
   RowBox[{"p_Integer", "?", "PrimeQ"}], "]"}], " ", ":=", " ", 
  RowBox[{"MemberQ", "[", 
   RowBox[{
    RowBox[{"Table", "[", 
     RowBox[{
      RowBox[{"Mod", "[", 
       RowBox[{
        RowBox[{"i", "^", "2"}], ",", "p"}], "]"}], ",", " ", 
      RowBox[{"{", 
       RowBox[{"i", ",", "1", ",", 
        RowBox[{"p", "-", "1"}]}], "}"}]}], "]"}], ",", " ", "2"}], 
   "]"}]}]], "Input",
 CellChangeTimes->{{3.48699781474979*^9, 3.486997859412074*^9}, {
  3.486997901882853*^9, 3.48699792205581*^9}}],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"twoIsSquare", "::", "\"\<usage\>\""}], " ", "=", " ", 
  "\"\<twoIsSquare[p] returns True if 2 is a square modulo a prime \
p.\>\""}]], "Input",
 CellChangeTimes->{{3.4869981840374937`*^9, 3.486998209265718*^9}}],

Cell[BoxData["\<\"twoIsSquare[p] returns True if 2 is a square modulo a prime \
p.\"\>"], "Output",
 CellChangeTimes->{3.486998209647657*^9}]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Select", "[", 
  RowBox[{"plist", ",", "twoIsSquare"}], "]"}]], "Input",
 CellChangeTimes->{{3.4869979267332277`*^9, 3.486997933301206*^9}}],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
  "7", ",", "17", ",", "23", ",", "31", ",", "41", ",", "47", ",", "71", ",", 
   "73", ",", "79", ",", "89", ",", "97", ",", "103", ",", "113", ",", "127", 
   ",", "137", ",", "151", ",", "167", ",", "191", ",", "193", ",", "199", 
   ",", "223", ",", "233", ",", "239", ",", "241", ",", "257", ",", "263", 
   ",", "271", ",", "281", ",", "311", ",", "313", ",", "337", ",", "353", 
   ",", "359", ",", "367", ",", "383", ",", "401", ",", "409", ",", "431", 
   ",", "433", ",", "439", ",", "449", ",", "457", ",", "463", ",", "479", 
   ",", "487", ",", "503", ",", "521", ",", "569", ",", "577", ",", "593", 
   ",", "599", ",", "601", ",", "607", ",", "617", ",", "631", ",", "641", 
   ",", "647", ",", "673", ",", "719", ",", "727", ",", "743", ",", "751", 
   ",", "761", ",", "769", ",", "809", ",", "823", ",", "839", ",", "857", 
   ",", "863", ",", "881", ",", "887", ",", "911", ",", "919", ",", "929", 
   ",", "937", ",", "953", ",", "967", ",", "977", ",", "983", ",", "991", 
   ",", "1009", ",", "1031", ",", "1033", ",", "1039", ",", "1049", ",", 
   "1063", ",", "1087", ",", "1097", ",", "1103", ",", "1129", ",", "1151", 
   ",", "1153", ",", "1193", ",", "1201", ",", "1217", ",", "1223", ",", 
   "1231", ",", "1249", ",", "1279", ",", "1289", ",", "1297", ",", "1303", 
   ",", "1319", ",", "1321", ",", "1327", ",", "1361", ",", "1367", ",", 
   "1399", ",", "1409", ",", "1423", ",", "1433", ",", "1439", ",", "1447", 
   ",", "1471", ",", "1481", ",", "1487", ",", "1489", ",", "1511", ",", 
   "1543", ",", "1553", ",", "1559", ",", "1567", ",", "1583", ",", "1601", 
   ",", "1607", ",", "1609", ",", "1657", ",", "1663", ",", "1697", ",", 
   "1721", ",", "1753", ",", "1759", ",", "1777", ",", "1783", ",", "1801", 
   ",", "1823", ",", "1831", ",", "1847", ",", "1871", ",", "1873", ",", 
   "1879", ",", "1889", ",", "1913", ",", "1951", ",", "1993", ",", "1999", 
   ",", "2017", ",", "2039", ",", "2063", ",", "2081", ",", "2087", ",", 
   "2089", ",", "2111", ",", "2113", ",", "2129", ",", "2137", ",", "2143", 
   ",", "2153", ",", "2161", ",", "2207", ",", "2239", ",", "2273", ",", 
   "2281", ",", "2287", ",", "2297", ",", "2311", ",", "2351", ",", "2377", 
   ",", "2383", ",", "2393", ",", "2399", ",", "2417", ",", "2423", ",", 
   "2441", ",", "2447", ",", "2473", ",", "2503", ",", "2521", ",", "2543", 
   ",", "2551", ",", "2591", ",", "2593", ",", "2609", ",", "2617", ",", 
   "2633", ",", "2647", ",", "2657", ",", "2663", ",", "2671", ",", "2687", 
   ",", "2689", ",", "2711", ",", "2713", ",", "2719", ",", "2729", ",", 
   "2753", ",", "2767", ",", "2777", ",", "2791", ",", "2801", ",", "2833", 
   ",", "2857", ",", "2879", ",", "2887", ",", "2897", ",", "2903", ",", 
   "2927", ",", "2953", ",", "2969", ",", "2999", ",", "3001", ",", "3023", 
   ",", "3041", ",", "3049", ",", "3079", ",", "3089", ",", "3119", ",", 
   "3121", ",", "3137", ",", "3167", ",", "3169", ",", "3191", ",", "3209", 
   ",", "3217", ",", "3257", ",", "3271", ",", "3313", ",", "3319", ",", 
   "3329", ",", "3343", ",", "3359", ",", "3361", ",", "3391", ",", "3407", 
   ",", "3433", ",", "3449", ",", "3457", ",", "3463", ",", "3511", ",", 
   "3527", ",", "3529", ",", "3559", ",", "3583", ",", "3593", ",", "3607", 
   ",", "3617", ",", "3623", ",", "3631", ",", "3671", ",", "3673", ",", 
   "3697", ",", "3719", ",", "3727", ",", "3761", ",", "3767", ",", "3769", 
   ",", "3793", ",", "3823", ",", "3833", ",", "3847", ",", "3863", ",", 
   "3881", ",", "3889", ",", "3911", ",", "3919", ",", "3929", ",", "3943", 
   ",", "3967", ",", "4001", ",", "4007", ",", "4049", ",", "4057", ",", 
   "4073", ",", "4079", ",", "4111", ",", "4127", ",", "4129", ",", "4153", 
   ",", "4159", ",", "4177", ",", "4201", ",", "4217", ",", "4231", ",", 
   "4241", ",", "4271", ",", "4273", ",", "4289", ",", "4297", ",", "4327", 
   ",", "4337", ",", "4391", ",", "4409", ",", "4423", ",", "4441", ",", 
   "4447", ",", "4457", ",", "4463", ",", "4481", ",", "4513", ",", "4519", 
   ",", "4561", ",", "4567", ",", "4583", ",", "4591", ",", "4639", ",", 
   "4649", ",", "4657", ",", "4663", ",", "4673", ",", "4679", ",", "4703", 
   ",", "4721", ",", "4729", ",", "4751", ",", "4759", ",", "4783", ",", 
   "4793", ",", "4799", ",", "4801", ",", "4817", ",", "4831", ",", "4871", 
   ",", "4889", ",", "4903", ",", "4919", ",", "4937", ",", "4943", ",", 
   "4951", ",", "4967", ",", "4969", ",", "4993", ",", "4999", ",", "5009", 
   ",", "5023", ",", "5039", ",", "5081", ",", "5087", ",", "5113", ",", 
   "5119", ",", "5153", ",", "5167", ",", "5209", ",", "5231", ",", "5233", 
   ",", "5273", ",", "5279", ",", "5281", ",", "5297", ",", "5303", ",", 
   "5351", ",", "5393", ",", "5399", ",", "5407", ",", "5417", ",", "5431", 
   ",", "5441", ",", "5449", ",", "5471", ",", "5479", ",", "5503", ",", 
   "5519", ",", "5521", ",", "5527", ",", "5569", ",", "5591", ",", "5623", 
   ",", "5639", ",", "5641", ",", "5647", ",", "5657", ",", "5689", ",", 
   "5711", ",", "5737", ",", "5743", ",", "5783", ",", "5791", ",", "5801", 
   ",", "5807", ",", "5839", ",", "5849", ",", "5857", ",", "5879", ",", 
   "5881", ",", "5897", ",", "5903", ",", "5927", ",", "5953", ",", "6007", 
   ",", "6047", ",", "6073", ",", "6079", ",", "6089", ",", "6113", ",", 
   "6121", ",", "6143", ",", "6151", ",", "6199", ",", "6217", ",", "6247", 
   ",", "6257", ",", "6263", ",", "6271", ",", "6287", ",", "6311", ",", 
   "6329", ",", "6337", ",", "6343", ",", "6353", ",", "6359", ",", "6361", 
   ",", "6367", ",", "6449", ",", "6473", ",", "6481", ",", "6521", ",", 
   "6529", ",", "6551", ",", "6553", ",", "6569", ",", "6577", ",", "6599", 
   ",", "6607", ",", "6673", ",", "6679", ",", "6689", ",", "6703", ",", 
   "6719", ",", "6737", ",", "6761", ",", "6791", ",", "6793", ",", "6823", 
   ",", "6833", ",", "6841", ",", "6857", ",", "6863", ",", "6871", ",", 
   "6911", ",", "6959", ",", "6961", ",", "6967", ",", "6977", ",", "6983", 
   ",", "6991", ",", "7001", ",", "7039", ",", "7057", ",", "7079", ",", 
   "7103", ",", "7121", ",", "7127", ",", "7129", ",", "7151", ",", "7159", 
   ",", "7177", ",", "7193", ",", "7207", ",", "7247", ",", "7297", ",", 
   "7321", ",", "7351", ",", "7369", ",", "7393", ",", "7417", ",", "7433", 
   ",", "7457", ",", "7481", ",", "7487", ",", "7489", ",", "7529", ",", 
   "7537", ",", "7559", ",", "7561", ",", "7577", ",", "7583", ",", "7591", 
   ",", "7607", ",", "7639", ",", "7649", ",", "7673", ",", "7681", ",", 
   "7687", ",", "7703", ",", "7727", ",", "7753", ",", "7759", ",", "7793", 
   ",", "7817", ",", "7823", ",", "7841", ",", "7873", ",", "7879", ",", 
   "7919", ",", "7927"}], "}"}]], "Output",
 CellChangeTimes->{3.4869979346239977`*^9}]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Map", "[", 
  RowBox[{
   RowBox[{
    RowBox[{"Mod", "[", 
     RowBox[{"#", ",", "8"}], "]"}], "&"}], ",", " ", 
   RowBox[{"Select", "[", 
    RowBox[{"plist", ",", "twoIsSquare"}], "]"}]}], "]"}]], "Input",
 CellChangeTimes->{{3.4869979374034643`*^9, 3.4869981118724957`*^9}}],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
  "7", ",", "1", ",", "7", ",", "7", ",", "1", ",", "7", ",", "7", ",", "1", 
   ",", "7", ",", "1", ",", "1", ",", "7", ",", "1", ",", "7", ",", "1", ",", 
   "7", ",", "7", ",", "7", ",", "1", ",", "7", ",", "7", ",", "1", ",", "7", 
   ",", "1", ",", "1", ",", "7", ",", "7", ",", "1", ",", "7", ",", "1", ",", 
   "1", ",", "1", ",", "7", ",", "7", ",", "7", ",", "1", ",", "1", ",", "7", 
   ",", "1", ",", "7", ",", "1", ",", "1", ",", "7", ",", "7", ",", "7", ",", 
   "7", ",", "1", ",", "1", ",", "1", ",", "1", ",", "7", ",", "1", ",", "7", 
   ",", "1", ",", "7", ",", "1", ",", "7", ",", "1", ",", "7", ",", "7", ",", 
   "7", ",", "7", ",", "1", ",", "1", ",", "1", ",", "7", ",", "7", ",", "1", 
   ",", "7", ",", "1", ",", "7", ",", "7", ",", "7", ",", "1", ",", "1", ",", 
   "1", ",", "7", ",", "1", ",", "7", ",", "7", ",", "1", ",", "7", ",", "1", 
   ",", "7", ",", "1", ",", "7", ",", "7", ",", "1", ",", "7", ",", "1", ",", 
   "7", ",", "1", ",", "1", ",", "1", ",", "1", ",", "7", ",", "7", ",", "1", 
   ",", "7", ",", "1", ",", "1", ",", "7", ",", "7", ",", "1", ",", "7", ",", 
   "1", ",", "7", ",", "7", ",", "1", ",", "7", ",", "1", ",", "7", ",", "7", 
   ",", "7", ",", "1", ",", "7", ",", "1", ",", "7", ",", "7", ",", "1", ",", 
   "7", ",", "7", ",", "7", ",", "1", ",", "7", ",", "1", ",", "1", ",", "7", 
   ",", "1", ",", "1", ",", "1", ",", "7", ",", "1", ",", "7", ",", "1", ",", 
   "7", ",", "7", ",", "7", ",", "7", ",", "1", ",", "7", ",", "1", ",", "1", 
   ",", "7", ",", "1", ",", "7", ",", "1", ",", "7", ",", "7", ",", "1", ",", 
   "7", ",", "1", ",", "7", ",", "1", ",", "1", ",", "1", ",", "7", ",", "1", 
   ",", "1", ",", "7", ",", "7", ",", "1", ",", "1", ",", "7", ",", "1", ",", 
   "7", ",", "7", ",", "1", ",", "7", ",", "1", ",", "7", ",", "1", ",", "7", 
   ",", "1", ",", "7", ",", "1", ",", "7", ",", "1", ",", "7", ",", "7", ",", 
   "7", ",", "1", ",", "1", ",", "1", ",", "1", ",", "7", ",", "1", ",", "7", 
   ",", "7", ",", "7", ",", "1", ",", "7", ",", "1", ",", "7", ",", "1", ",", 
   "1", ",", "7", ",", "1", ",", "7", ",", "1", ",", "1", ",", "1", ",", "7", 
   ",", "7", ",", "1", ",", "7", ",", "7", ",", "1", ",", "1", ",", "7", ",", 
   "1", ",", "7", ",", "1", ",", "1", ",", "7", ",", "1", ",", "7", ",", "1", 
   ",", "1", ",", "7", ",", "1", ",", "7", ",", "1", ",", "1", ",", "1", ",", 
   "7", ",", "1", ",", "7", ",", "1", ",", "7", ",", "7", ",", "1", ",", "7", 
   ",", "7", ",", "1", ",", "1", ",", "1", ",", "7", ",", "7", ",", "7", ",", 
   "1", ",", "7", ",", "7", ",", "1", ",", "7", ",", "1", ",", "7", ",", "7", 
   ",", "7", ",", "1", ",", "1", ",", "7", ",", "7", ",", "1", ",", "7", ",", 
   "1", ",", "1", ",", "7", ",", "1", ",", "7", ",", "7", ",", "1", ",", "1", 
   ",", "7", ",", "7", ",", "1", ",", "7", ",", "7", ",", "1", ",", "7", ",", 
   "1", ",", "1", ",", "1", ",", "7", ",", "7", ",", "7", ",", "1", ",", "1", 
   ",", "7", ",", "1", ",", "1", ",", "1", ",", "7", ",", "1", ",", "7", ",", 
   "1", ",", "1", ",", "1", ",", "7", ",", "1", ",", "7", ",", "1", ",", "7", 
   ",", "1", ",", "7", ",", "1", ",", "7", ",", "1", ",", "1", ",", "7", ",", 
   "1", ",", "7", ",", "7", ",", "7", ",", "7", ",", "1", ",", "1", ",", "7", 
   ",", "1", ",", "7", ",", "7", ",", "1", ",", "1", ",", "7", ",", "7", ",", 
   "7", ",", "1", ",", "7", ",", "1", ",", "1", ",", "7", ",", "7", ",", "1", 
   ",", "7", ",", "7", ",", "1", ",", "7", ",", "7", ",", "7", ",", "1", ",", 
   "1", ",", "7", ",", "1", ",", "7", ",", "7", ",", "1", ",", "7", ",", "1", 
   ",", "7", ",", "1", ",", "7", ",", "1", ",", "7", ",", "1", ",", "1", ",", 
   "7", ",", "1", ",", "1", ",", "7", ",", "7", ",", "1", ",", "7", ",", "7", 
   ",", "1", ",", "7", ",", "1", ",", "1", ",", "7", ",", "7", ",", "7", ",", 
   "7", ",", "1", ",", "7", ",", "1", ",", "7", ",", "7", ",", "7", ",", "1", 
   ",", "7", ",", "1", ",", "1", ",", "7", ",", "1", ",", "7", ",", "7", ",", 
   "7", ",", "1", ",", "7", ",", "7", ",", "1", ",", "1", ",", "7", ",", "1", 
   ",", "1", ",", "7", ",", "7", ",", "1", ",", "7", ",", "7", ",", "1", ",", 
   "7", ",", "1", ",", "1", ",", "1", ",", "7", ",", "7", ",", "7", ",", "1", 
   ",", "7", ",", "1", ",", "7", ",", "7", ",", "7", ",", "7", ",", "1", ",", 
   "1", ",", "7", ",", "1", ",", "7", ",", "1", ",", "7", ",", "1", ",", "1", 
   ",", "1", ",", "1", ",", "1", ",", "7", ",", "1", ",", "1", ",", "1", ",", 
   "7", ",", "7", ",", "1", ",", "7", ",", "1", ",", "7", ",", "7", ",", "1", 
   ",", "1", ",", "7", ",", "1", ",", "7", ",", "1", ",", "1", ",", "1", ",", 
   "7", ",", "7", ",", "7", ",", "7", ",", "1", ",", "7", ",", "1", ",", "7", 
   ",", "7", ",", "1", ",", "7", ",", "1", ",", "7", ",", "7", ",", "1", ",", 
   "7", ",", "1", ",", "7", ",", "7", ",", "1", ",", "1", ",", "7", ",", "7", 
   ",", "1", ",", "1", ",", "7", ",", "1", ",", "1", ",", "1", ",", "1", ",", 
   "1", ",", "1", ",", "7", ",", "1", ",", "1", ",", "1", ",", "7", ",", "1", 
   ",", "1", ",", "7", ",", "7", ",", "7", ",", "7", ",", "1", ",", "1", ",", 
   "1", ",", "7", ",", "7", ",", "7", ",", "1", ",", "7", ",", "1", ",", "1", 
   ",", "7", ",", "1", ",", "1", ",", "7", ",", "7", ",", "7"}], 
  "}"}]], "Output",
 CellChangeTimes->{{3.4869979744197807`*^9, 3.486998001181566*^9}, 
   3.486998036775222*^9, {3.486998090334687*^9, 3.486998104698112*^9}}]
}, Open  ]],

Cell["\<\
Two is a square modulo a prime p if p is of the form 8x+1 or 8x-1.
\
\>", "Text",
 CellChangeTimes->{{3.486998133901288*^9, 3.486998164131177*^9}}],

Cell[BoxData[
 RowBox[{
  RowBox[{"isSquare", "[", 
   RowBox[{"a_Integer", ",", " ", 
    RowBox[{"p_Integer", "?", "PrimeQ"}]}], "]"}], " ", ":=", 
  RowBox[{"If", "[", 
   RowBox[{
    RowBox[{
     RowBox[{"PowerMod", "[", 
      RowBox[{"a", ",", 
       RowBox[{
        RowBox[{"(", 
         RowBox[{"p", "-", "1"}], ")"}], "/", "2"}], ",", " ", "p"}], "]"}], 
     "\[Equal]", " ", "1"}], ",", " ", "True", ",", " ", "False"}], 
   "]"}]}]], "Input",
 CellChangeTimes->{{3.486998369289444*^9, 3.4869983758443327`*^9}, {
  3.4869985097882023`*^9, 3.486998575374773*^9}, {3.487081721922463*^9, 
  3.487081741943385*^9}}],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"isSquare", "::", "\"\<usage\>\""}], " ", "=", " ", 
  "\"\<isSquare[a,p] returns True or False given an integer a and a prime p, \
depending on whether there exists an x such that x^2 = a modulo p\>\""}]], \
"Input",
 CellChangeTimes->{{3.486998645706153*^9, 3.48699869877394*^9}}],

Cell[BoxData["\<\"isSquare[a,p] returns True or False given an integer a and \
a prime p, depending on whether there exists an x such that x^2 = a modulo \
p\"\>"], "Output",
 CellChangeTimes->{3.48699869915372*^9, 3.487081744509671*^9}]
}, Open  ]],

Cell[TextData[{
 "Let x = ",
 Cell[BoxData[
  FormBox[
   RowBox[{
    RowBox[{
     RowBox[{
      SuperscriptBox["a", 
       FractionBox[
        RowBox[{"p", "-", "1"}], "2"]], ".", "  ", "Then"}], " ", 
     RowBox[{"x", "^", "2"}]}], " ", "=", " ", 
    RowBox[{
     RowBox[{"1", " ", 
      RowBox[{"(", 
       RowBox[{"mod", " ", "p"}], ")"}], " ", "by", " ", 
      RowBox[{"Fermat", "'"}], "s", " ", "Little", " ", "Theorem", " ", "and",
       " ", "thus", " ", "either", " ", "x"}], " ", "=", " ", 
     RowBox[{
      RowBox[{
       RowBox[{"+", "1"}], " ", "or", " ", "x"}], " ", "=", " ", 
      RowBox[{"-", "1."}]}]}]}], TraditionalForm]],
  FormatType->"TraditionalForm"],
 "\nPart 1: if a square root modulo p exists then x = +1\nAssume that there \
exists a k such that ",
 Cell[BoxData[
  FormBox[
   SuperscriptBox["k", "2"], TraditionalForm]],
  FormatType->"TraditionalForm"],
 " = a (mod p).  Then ",
 Cell[BoxData[
  FormBox[
   SuperscriptBox["a", 
    FractionBox[
     RowBox[{"p", "-", "1"}], "2"]], TraditionalForm]],
  FormatType->"TraditionalForm"],
 " is equal to ",
 Cell[BoxData[
  FormBox[
   SuperscriptBox["k", 
    RowBox[{"p", "-", "1"}]], TraditionalForm]],
  FormatType->"TraditionalForm"],
 " which is equal to 1 by Fermat's Little Theroem.\n\nPart 2: if no square \
root exists then x = -1 \nSince no square root exists, then the set \
{1,2,...,p-1} can be partitioned into disjoint pairs {c,d} such that cd = a \
(mod p).  By Wilson's Theorem, the product of the union of these partitions \
is -1 mod p.\[LineSeparator]\n"
}], "Text",
 CellChangeTimes->{{3.4870817461642647`*^9, 3.487081746533168*^9}, {
  3.4870818332726107`*^9, 3.4870819287433977`*^9}, {3.487082128537751*^9, 
  3.48708212997759*^9}, {3.487082193391309*^9, 3.487082194165183*^9}, {
  3.487082246178578*^9, 3.487082354483219*^9}, {3.487082416778022*^9, 
  3.4870825087674503`*^9}, {3.4870825792605467`*^9, 3.487082640922612*^9}}],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Select", "[", 
  RowBox[{
   RowBox[{"Range", "[", 
    RowBox[{"1", ",", "1000000"}], "]"}], ",", " ", 
   RowBox[{
    RowBox[{
     RowBox[{"3", "*", "#"}], " ", "\[Equal]", " ", 
     RowBox[{"Plus", " ", "@@", " ", 
      RowBox[{"Divisors", "[", "#", "]"}]}]}], "&"}]}], "]"}]], "Input",
 CellChangeTimes->{{3.487084749314253*^9, 3.487084770469116*^9}}],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"120", ",", "672", ",", "523776"}], "}"}]], "Output",
 CellChangeTimes->{3.487084783111656*^9}]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Select", "[", 
  RowBox[{
   RowBox[{"Range", "[", 
    RowBox[{"1", ",", "1000000"}], "]"}], ",", 
   RowBox[{
    RowBox[{
     RowBox[{"5", "*", "#"}], " ", "\[Equal]", " ", 
     RowBox[{"Plus", " ", "@@", 
      RowBox[{"Divisors", "[", "#", "]"}]}]}], "&"}]}], "]"}]], "Input",
 CellChangeTimes->{{3.4870848854826603`*^9, 3.487084901676241*^9}}],

Cell[BoxData[
 RowBox[{"{", "}"}]], "Output",
 CellChangeTimes->{3.4870849126673937`*^9}]
}, Open  ]],

Cell["\<\
k-perfect numbers seem to always be even.  The sum of the reciprocals of the \
divisors is always k because you can make all the denominators equal to n, \
and then the sum of the numerators is kn because they run through all the \
divisors.  This makes a total of kn/n = 3.\
\>", "Text",
 CellChangeTimes->{{3.48708481380991*^9, 3.4870848843552513`*^9}}],

Cell[BoxData[
 RowBox[{
  RowBox[{"pairs", " ", "=", " ", 
   RowBox[{"Join", " ", "@@", " ", 
    RowBox[{"Table", "[", 
     RowBox[{
      RowBox[{"Table", "[", 
       RowBox[{
        RowBox[{"{", 
         RowBox[{"i", ",", "j"}], "}"}], ",", 
        RowBox[{"{", 
         RowBox[{"i", ",", "2", ",", 
          RowBox[{"j", "-", "1"}]}], "}"}]}], "]"}], ",", 
      RowBox[{"{", 
       RowBox[{"j", ",", "3", ",", "1000"}], "}"}]}], "]"}]}]}], 
  ";"}]], "Input",
 CellChangeTimes->{{3.4888968841274843`*^9, 3.4888970434782867`*^9}, {
  3.48889722584766*^9, 3.488897226046981*^9}, {3.4888972575122633`*^9, 
  3.488897259140411*^9}}],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Select", "[", 
  RowBox[{"pairs", ",", 
   RowBox[{
    RowBox[{
     RowBox[{
      RowBox[{"#", "[", 
       RowBox[{"[", "1", "]"}], "]"}], " ", "+", " ", 
      RowBox[{"#", "[", 
       RowBox[{"[", "2", "]"}], "]"}]}], " ", "\[Equal]", " ", 
     RowBox[{"Plus", " ", "@@", 
      RowBox[{"Divisors", "[", 
       RowBox[{"#", "[", 
        RowBox[{"[", "1", "]"}], "]"}], "]"}]}], " ", "\[Equal]", " ", 
     RowBox[{"Plus", " ", "@@", " ", 
      RowBox[{"Divisors", "[", 
       RowBox[{"#", "[", 
        RowBox[{"[", "2", "]"}], "]"}], "]"}]}]}], " ", "&"}]}], 
  "]"}]], "Input",
 CellChangeTimes->{{3.488897061437315*^9, 3.488897104929278*^9}, {
  3.488897137782092*^9, 3.48889718385938*^9}}],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"{", 
   RowBox[{"220", ",", "284"}], "}"}], "}"}]], "Output",
 CellChangeTimes->{{3.4888972440040197`*^9, 3.4888972728032637`*^9}}]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Plus", " ", "@@", " ", 
  RowBox[{"Divisors", "[", "144", "]"}]}]], "Input",
 CellChangeTimes->{{3.488896906540895*^9, 3.488896910612788*^9}}],

Cell[BoxData["403"], "Output",
 CellChangeTimes->{3.48889691101748*^9}]
}, Open  ]],

Cell[BoxData[
 RowBox[{
  RowBox[{"polynomialGCDEuclid", "[", 
   RowBox[{"f_", ",", "g_", ",", " ", "x_"}], "]"}], " ", ":=", " ", 
  RowBox[{"If", "[", 
   RowBox[{
    RowBox[{"NumericQ", "[", "g", "]"}], ",", " ", 
    RowBox[{"If", "[", 
     RowBox[{
      RowBox[{"PossibleZeroQ", "[", "g", "]"}], ",", " ", 
      RowBox[{"Expand", "[", 
       RowBox[{"f", "/", 
        RowBox[{"Coefficient", "[", 
         RowBox[{"f", ",", "x", ",", 
          RowBox[{"Exponent", "[", 
           RowBox[{"f", ",", "x"}], "]"}]}], "]"}]}], "]"}], ",", "1"}], 
     "]"}], ",", 
    RowBox[{"polynomialGCDEuclid", "[", 
     RowBox[{"g", ",", " ", 
      RowBox[{"PolynomialRemainder", "[", 
       RowBox[{"f", ",", "g", ",", "x"}], "]"}], ",", "x"}], "]"}]}], 
   "]"}]}]], "Input",
 CellChangeTimes->{{3.487084929648569*^9, 3.487085022125819*^9}}],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"polynomialGCDEuclid", "[", 
  RowBox[{
   RowBox[{
    RowBox[{"(", 
     RowBox[{"x", "+", "1"}], ")"}], 
    RowBox[{"(", 
     RowBox[{"x", "+", "2"}], ")"}]}], ",", " ", 
   RowBox[{
    RowBox[{"(", 
     RowBox[{"x", "+", "2"}], ")"}], 
    RowBox[{"(", 
     RowBox[{"x", "+", "3"}], ")"}]}], ",", " ", "x"}], "]"}]], "Input",
 CellChangeTimes->{{3.487085023677185*^9, 3.487085035978812*^9}}],

Cell[BoxData[
 RowBox[{"2", "+", "x"}]], "Output",
 CellChangeTimes->{3.4870850363667297`*^9}]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"polynomialGCDEuclid", "::", "\"\<usage\>\""}], " ", "=", " ", 
  "\"\<polynomialGCDEuclid[f,g,x] returns the polynomial of highest degree \
with leading coefficient 1 such that it divides f and g, which are \
polynomials in x.\>\""}]], "Input",
 CellChangeTimes->{{3.487085039012171*^9, 3.487085089896039*^9}}],

Cell[BoxData["\<\"polynomialGCDEuclid[f,g,x] returns the polynomial of \
highest degree with leading coefficient 1 such that it divides f and g, which \
are polynomials in x.\"\>"], "Output",
 CellChangeTimes->{3.4870850903878717`*^9}]
}, Open  ]]
},
WindowSize->{640, 750},
WindowMargins->{{Automatic, 416}, {Automatic, 107}},
ShowSelection->True,
FrontEndVersion->"7.0 for Mac OS X x86 (32-bit) (February 18, 2009)",
StyleDefinitions->"Default.nb"
]
(* End of Notebook Content *)

(* Internal cache information *)
(*CellTagsOutline
CellTagsIndex->{}
*)
(*CellTagsIndex
CellTagsIndex->{}
*)
(*NotebookFileOutline
Notebook[{
Cell[545, 20, 303, 9, 27, "Input"],
Cell[851, 31, 642, 17, 43, "Input"],
Cell[CellGroupData[{
Cell[1518, 52, 263, 5, 58, "Input"],
Cell[1784, 59, 154, 2, 43, "Output"]
}, Open  ]],
Cell[CellGroupData[{
Cell[1975, 66, 137, 2, 27, "Input"],
Cell[2115, 70, 73, 1, 27, "Output"]
}, Open  ]],
Cell[CellGroupData[{
Cell[2225, 76, 203, 4, 27, "Input"],
Cell[2431, 82, 6793, 92, 613, "Output"]
}, Open  ]],
Cell[CellGroupData[{
Cell[9261, 179, 190, 4, 27, "Input"],
Cell[9454, 185, 6921, 94, 628, "Output"]
}, Open  ]],
Cell[CellGroupData[{
Cell[16412, 284, 343, 10, 27, "Input"],
Cell[16758, 296, 99, 1, 27, "Output"]
}, Open  ]],
Cell[CellGroupData[{
Cell[16894, 302, 324, 10, 27, "Input"],
Cell[17221, 314, 73, 1, 27, "Output"]
}, Open  ]],
Cell[17309, 318, 202, 4, 26, "Text"],
Cell[17514, 324, 565, 16, 43, "Input"],
Cell[CellGroupData[{
Cell[18104, 344, 247, 5, 43, "Input"],
Cell[18354, 351, 141, 2, 27, "Output"]
}, Open  ]],
Cell[CellGroupData[{
Cell[18532, 358, 164, 3, 27, "Input"],
Cell[18699, 363, 6782, 92, 613, "Output"]
}, Open  ]],
Cell[CellGroupData[{
Cell[25518, 460, 304, 8, 27, "Input"],
Cell[25825, 470, 5399, 71, 298, "Output"]
}, Open  ]],
Cell[31239, 544, 157, 4, 41, "Text"],
Cell[31399, 550, 627, 17, 43, "Input"],
Cell[CellGroupData[{
Cell[32051, 571, 316, 6, 73, "Input"],
Cell[32370, 579, 237, 3, 43, "Output"]
}, Open  ]],
Cell[32622, 585, 1946, 51, 183, "Text"],
Cell[CellGroupData[{
Cell[34593, 640, 383, 10, 27, "Input"],
Cell[34979, 652, 134, 3, 27, "Output"]
}, Open  ]],
Cell[CellGroupData[{
Cell[35150, 660, 375, 10, 27, "Input"],
Cell[35528, 672, 89, 2, 27, "Output"]
}, Open  ]],
Cell[35632, 677, 365, 6, 56, "Text"],
Cell[36000, 685, 642, 18, 27, "Input"],
Cell[CellGroupData[{
Cell[36667, 707, 729, 20, 43, "Input"],
Cell[37399, 729, 171, 4, 27, "Output"]
}, Open  ]],
Cell[CellGroupData[{
Cell[37607, 738, 166, 3, 27, "Input"],
Cell[37776, 743, 71, 1, 27, "Output"]
}, Open  ]],
Cell[37862, 747, 846, 22, 73, "Input"],
Cell[CellGroupData[{
Cell[38733, 773, 423, 13, 27, "Input"],
Cell[39159, 788, 94, 2, 27, "Output"]
}, Open  ]],
Cell[CellGroupData[{
Cell[39290, 795, 345, 6, 73, "Input"],
Cell[39638, 803, 235, 3, 58, "Output"]
}, Open  ]]
}
]
*)

(* End of internal cache information *)
